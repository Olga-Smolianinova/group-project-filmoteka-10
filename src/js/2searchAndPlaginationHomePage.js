// 2.2) 2searchAndPlaginationHomePage.js:
// - не забываем в верстке параграф под формой для отображения ошибки на некорректный запрос, берем его из DOM;
// - создаем глобальные переменную inputVaue (будут использоваться в запросах, как и pageNumber созданный первым участником - НЕ ДУБЛИРУЕМ ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ);
// - берем из DOM форму, инпут, обе кнопки, контейнер страницы;
// - создаем функцию fetchFilms (должна в запросе использовать глобальные переменные pageNumber и inputVaue, в случае ответа пустым массивом отрисовывать ошибку, в случае корректного ответа чистить ul, и с помощью createCardFunc созданной первым участником отрисовывать фильмы, не забываем также положить в глобальную переменную renderFilms результат;
// - создать функцию searchFilms принимающую ивент, обрабатывающую дефолтное поведение формы и тп, также она должна менять глобальную переменную inputVaue и после запускать функцию fetchFilms использующую эту переменную у себя под капотом;
// - вешаем searchFilms на сабмит формы;
// - создаем функция plaginationNavigation принимающую ивент, по id она определяет какая из кнопок была нажат и в зависимости от этого по разному отрабатывает изменяя при этом глобальные переменные pageNumber, прорисовуя его в контейнере в DOM и запускает на пустую строчку inputValue функцию fetchPopularMoviesList или fetchFilms;
// - кнопка назад должна исчезать когда текущее количество страниц “1” и появляться при “2” и более; - вешаем слушателем функцию plaginationNavigation на кнопки вперед и назад.

const searchQuery = 'winter';

function fetchFilms() {
  const url = `https://api.themoviedb.org/3/search/movie?api_key=a524e22e3630cf24a2e0a24a461145a2&query=${searchQuery}`;

  return fetch(url)
    .then(response => {
      console.log(response);
      return response.json();
    })
    .then(({ results }) => {
      console.log(results);
    });
}
// fetchFilms();
